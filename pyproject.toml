[project]
name = "gromo"
version = "0.0.1"
authors = [
    { name="Manon Verbockhaven", email="manon.verbockhaven@inria.fr" },
    { name="Stella Douka", email="styliani.douka@inria.fr" },
    { name="Theo Rudkiewicz", email="theo.rudkiewicz@inria.fr" },
    { name="Stephane Rivaud", email="stephane.a.rivaud@inria.fr" },
    { name="Guillaume Charpiat", email="guillaume.charpiat@inria.fr" },
    { name="Sylvain Chevallier", email="sylvain.a.chevallier@inria.fr" },
    { name="Francois Landes", email="francois.landes@universite-paris-saclay.fr" },
]
description = "Growing module for pytorch"
readme = "README.md"
requires-python = ">=3.11"
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
    "Operating System :: OS Independent",
]
dependencies = [
    "build",
    "networkx",
    "torch",
    "numpy",
]
[project.optional-dependencies]
test = ["coverage"]
dev = ["ruff", "pre-commit"]
doc = [
    "Sphinx",
    "sphinx-gallery",
    "sphinx-bootstrap-theme",
    "pydata-sphinx-theme",
    "numpydoc",
    "pre-commit",
    # "m2r2",
    "sphinx-design",
    "sphinx-rtd-theme",
    "sphinx_copybutton",
    "sphinxcontrib-bibtex",
    "sphinx-favicon",
    "matplotlib",
    "tqdm",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/gromo"]

[tool.black]
line-length = 90
target-version = ["py311", "py312"]

[tool.isort]
profile = "black"
line_length = 90
lines_after_imports = 2

[tool.coverage.run]
branch = true
include = [
    "src/*",
]
omit = [
    "**/__init__.py",
    "**/tests/**",
]

[tool.coverage.report]
exclude_also = [
    # Missing debug-only code
    "def __str__",
    "def __repr__",
    "if self\\.debug",
    "if verbose:",

    # Non-runnable code
    "if 0:",
    "if __name__ == .__main__.:",
    "pass",

    # Abstract methods
    "@(abc\\.)?abstractmethod",

    # Defensive assertion code
    "raise NotImplementedError",
]

[tool.ruff]
line-length = 90
target-version = "py311"

[tool.ruff.lint]
# Enable basic linting rules with type-related checks
select = [
    "F",    # Pyflakes
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "I",    # isort
    "N",    # pep8-naming
    "UP",   # pyupgrade
    "ANN",  # flake8-annotations (basic type checking)
    "B",    # flake8-bugbear
    "A",    # flake8-builtins
    "COM",  # flake8-commas
    "C4",   # flake8-comprehensions
    "PYI",  # flake8-pyi (stub files)
    "TCH",  # flake8-type-checking
    "ARG",  # flake8-unused-arguments
    "RUF",  # Ruff-specific rules
]

# Ignore some rules that might be too strict for existing codebase
ignore = [
    "ANN401",  # Dynamically typed expressions (Any) are disallowed
    "COM812",  # Trailing comma missing (conflicts with formatter)
    "COM819",  # Trailing comma prohibited (conflicts with formatter)
]

[tool.ruff.lint.per-file-ignores]
# Tests can have more relaxed type checking
"tests/**/*.py" = ["ANN", "ARG"]
# Examples can ignore type annotations
"examples/**/*.py" = ["ANN"]
# Init files can ignore unused imports
"**/__init__.py" = ["F401"]

[tool.ruff.format]
# Use same formatting as black
quote-style = "double"
indent-style = "space"
